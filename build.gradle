buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
        classpath 'com.netflix.nebula:nebula-release-plugin:4.1.0'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.9'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'nebula.nebula-release'
apply plugin: "com.gradle.plugin-publish"

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
      jcenter()
      mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
    distributionUrl="http://mvn/artifactory/gradle-wrapper-remote-cache/distributions/gradle-$gradleVersion-bin.zip"
}

publishing {
    publications {
        artifact(MavenPublication) {
            groupId 'ru.alfabank.pipe'
            artifactId 'steps-engine'

            from components.java
        }
    }
    repositories {
        maven {
            name        "alfaSnapshots"
            url         "http://mvn/artifactory/snapshots"
            credentials {
                username = System.env.ARTIFACTORY_USER
                password = System.env.ARTIFACTORY_PASSWORD
            }
        }
        maven {
            name        "alfaReleases"
            url         "http://mvn/artifactory/releases"
            credentials {
                username = System.env.ARTIFACTORY_USER
                password = System.env.ARTIFACTORY_PASSWORD
            }
        }
    }
}

task printDeps {
  doLast{
    def out = new File("deps")
    if (out.exists()) {
        out.delete()
    }
    print project.configurations
    def projectDependencies = project.configurations.compile.getAllDependencies().withType(ProjectDependency)
    def deps = project.configurations.runtime.getAllDependencies()
    out.createNewFile()
    deps.each {
        out << "${it.group}:${it.name}:${it.version}\n"
    }
  }
}
